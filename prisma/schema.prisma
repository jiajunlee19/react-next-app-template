// generator zod {
//   provider       = "zod-prisma-types"
// }

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  schemas  = ["packing"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_uid")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@schema("packing")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_uid")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
  @@schema("packing")
}
 
model User {
  id            String    @id @default(cuid()) @map("user_uid")
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  @@map("users")
  @@schema("packing")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
  @@schema("packing")
}

// model User {
//   user_uid String @db.Uuid @id @unique
//   email String @db.VarChar(100)
//   password String @db.VarChar(100)
//   role Role @default(user)
//   user_created_dt DateTime @db.Timestamp()
//   user_updated_dt DateTime @db.Timestamp()

//   accounts Account[]
//   sessions Session[]

//   @@map(name: "user")
//   @@schema("packing")
// }

model BoxType {
  box_type_uid String @db.Uuid @id @unique
  box_part_number String @db.VarChar(50)
  box_max_tray Int @db.Integer
  box_type_created_dt DateTime @db.Timestamp()
  box_type_updated_dt DateTime @db.Timestamp()

  boxes Box[]

  @@map(name: "box_type")
  @@schema("packing")
}

model TrayType {
  tray_type_uid String @db.Uuid @id @unique
  tray_part_number String @db.VarChar(50)
  tray_max_drive Int @db.Integer
  tray_type_created_dt DateTime @db.Timestamp()
  tray_type_updated_dt DateTime @db.Timestamp()

  trays Tray[]

  @@map(name: "tray_type")
  @@schema("packing")

}

model Shipdoc {
  shipdoc_uid String @db.Uuid @id @unique
  shipdoc_number String @db.VarChar(50)
  shipdoc_contact String @db.VarChar(50)
  shipdoc_created_dt DateTime @db.Timestamp()
  shipdoc_updated_dt DateTime @db.Timestamp()

  Boxes Box[]

  @@map(name: "shipdoc")
  @@schema("packing")
}

enum Status {
  active
  shipped

  @@schema("packing")
}

model Box {
  box_uid String @db.Uuid @id @unique
  box_type_uid String @db.Uuid
  shipdoc_uid String @db.Uuid
  box_status Status @default(active)
  box_created_dt DateTime @db.Timestamp()
  box_updated_dt DateTime @db.Timestamp()

  trays Tray[]

  fk_box_type_uid BoxType @relation(fields: [box_type_uid], references: [box_type_uid], onDelete: Restrict, onUpdate: Restrict)
  fk_shipdoc_uid Shipdoc @relation(fields: [shipdoc_uid], references: [shipdoc_uid], onDelete: Restrict, onUpdate: Restrict)

  @@map(name: "box")
  @@schema("packing")
}

model Tray {
  tray_uid String @db.Uuid @id @unique
  box_uid String @db.Uuid
  tray_type_uid String @db.Uuid
  tray_created_dt DateTime @db.Timestamp()
  tray_updated_dt DateTime @db.Timestamp()

  lots Lot[]

  fk_box_uid Box @relation(fields: [box_uid], references: [box_uid], onDelete: Restrict, onUpdate: Restrict)
  fk_tray_type_uid TrayType @relation(fields: [tray_type_uid], references: [tray_type_uid], onDelete: Restrict, onUpdate: Restrict)

  @@map(name: "tray")
  @@schema("packing")
}

model Lot {
  lot_uid String @db.Uuid @id @unique
  tray_uid String @db.Uuid
  lot_id String @db.VarChar(50)
  lot_qty Int @db.Integer
  lot_created_dt DateTime @db.Timestamp()
  lot_updated_dt DateTime @db.Timestamp()

  fk_tray_uid Tray @relation(fields: [tray_uid], references: [tray_uid], onDelete: Restrict, onUpdate: Restrict)

  @@map(name: "lot")
  @@schema("packing")
}

enum Role {
  user
  admin
  boss

  @@schema("packing")
}