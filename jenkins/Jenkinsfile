pipeline {
    // agent any
    agent {
        node {
            label 'agent-win-jiajunlee'
        }
    }

    parameters {
        string(name: 'email_from', defaultValue: 'no-reply-jenkins@email.com', description: 'Jenkins Notifications E-mail From')
        string(name: 'email_to', defaultValue: 'email@email.com', description: 'Jenkins Notifications E-mail To')
        string(name: 'email_bcc', defaultValue: '', description: 'Jenkins Notifications E-mail Bcc')
        string(name: 'email_cc', defaultValue: 'email@email.com', description: 'Jenkins Notifications E-mail Cc')
        string(name: 'env_cred', defaultValue: 'my-env-cred-id', description: 'Credential ID for secret env file')
        booleanParam(name: 'use_docker', defaultValue: true, description: 'Toggle method to execute stages by docker or non-docker')
    }

    stages {

        stage('Abort') {
            // Abort if its neither a commit to master branch NOR a pull request into master branch
            when {
                not {
                    anyOf {
                        branch 'master'
                        environment name: 'CHANGE_TARGET', value: 'master'
                    }
                }
            }
            steps {
                script {
                    currentBuild.result = 'ABORTED'
                    error('Aborted build since its neither a commit to master branch NOR a pull request into master branch !')
                }
            }
        }

        stage('Init') {
            steps {
                withCredentials([file(credentialsId: "${params.env_cred}", variable: 'envFile')]) {
                    sh 'cp "$envFile" "$WORKSPACE"'
                    echo "Copied envFile into $WORKSPACE !"
                }
            }
        }

        stage('Install') {
            when {
                allOf {
                    expression { params.use_docker != true }
                }
            }
            steps {
                sh 'chmod +x ./jenkins/scripts/install.sh'
                sh './jenkins/scripts/install.sh'
            }
        }

        stage('Kill') {
            // Kill if its a commit to master branch BUT not a pull request into master branch
            when {
                allOf {
                    expression { params.use_docker != true }
                    branch 'master'
                    not {
                        environment name: 'CHANGE_TARGET', value: 'master'
                    }
                }
            }
            steps {
                sh 'chmod +x ./jenkins/scripts/kill.sh'
                sh './jenkins/scripts/kill.sh'
            }
        }

        stage('Build') {
            when {
                allOf {
                    expression { params.use_docker != true }
                }
            }
            steps {
                sh 'chmod +x ./jenkins/scripts/build.sh'
                sh './jenkins/scripts/build.sh'
            }
        }

        stage('Deploy') {
            // Deploy if its a commit to master branch BUT not a pull request into master branch
            when {
                allOf {
                    expression { params.use_docker != true }
                    branch 'master'
                    not {
                        environment name: 'CHANGE_TARGET', value: 'master'
                    }
                }
            }
            steps {
                sh 'chmod +x ./jenkins/scripts/deploy.sh'
                sh 'JENKINS_NODE_COOKIE=dontKillMe ./jenkins/scripts/deploy.sh'
            }
        }

        stage('Dockerize-test') {
            // Dockerize-test if its NOT a commit to master branch BUT a pull request into master branch
            when {
                allOf {
                    expression { params.use_docker == true }
                    branch 'master'
                    environment name: 'CHANGE_TARGET', value: 'master'
                }
            }
            steps {
                sh 'chmod +x ./jenkins/scripts/dockerize-test.sh'
                sh './jenkins/scripts/dockerize-test.sh'
            }
        }

        stage('Dockerize') {
            // Dockerize if its a commit to master branch BUT not a pull request into master branch
            when {
                allOf {
                    expression { params.use_docker == true }
                    branch 'master'
                    not {
                        environment name: 'CHANGE_TARGET', value: 'master'
                    }
                }
            }
            steps {
                sh 'chmod +x ./jenkins/scripts/dockerize.sh'
                sh './jenkins/scripts/dockerize.sh'
            }
        }

    }

    post {
        success {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                echo "[Success]: ${env.JOB_NAME}"
                mail subject: "[Success]: ${env.JOB_NAME}", body: "Hi,<br><br>${env.JOB_NAME} has succeeded! Refer to below details: <br><br> \
                    <ul> \
                        <li>Change URL: ${env.CHANGE_URL}</li> \
                        <li>Change Branch: ${env.CHANGE_BRANCH}</li> \
                        <li>Change Target: ${env.CHANGE_TARGET}</li> \
                        <li>Build Number: ${env.BUILD_NUMBER}</li> \
                        <li>Build URL: ${env.BUILD_URL}</li> \
                        <li>Node Name: ${env.NODE_NAME}</li> \
                    </ul> \
                    <br><br><br>Best Regards,<br>Jenkins Robot", 
                charset: 'UTF-8', mimeType: 'text/html', from: "${params.email_from}", to: "${params.email_to}", bcc: "${params.email_bcc}", cc: "${params.email_cc}", replyTo: "${params.email_to}";  
            }
        }  

        failure {  
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                echo "[Failure]: ${env.JOB_NAME}"
                mail subject: "[Failure]: ${env.JOB_NAME}", body: "Hi,<br><br>${env.JOB_NAME} has failed! Refer to below details: <br><br> \
                    <ul> \
                        <li>Change URL: ${env.CHANGE_URL}</li> \
                        <li>Change Branch: ${env.CHANGE_BRANCH}</li> \
                        <li>Change Target: ${env.CHANGE_TARGET}</li> \
                        <li>Build Number: ${env.BUILD_NUMBER}</li> \
                        <li>Build URL: ${env.BUILD_URL}</li> \
                        <li>Node Name: ${env.NODE_NAME}</li> \
                    </ul> \
                    <br><br><br>Best Regards,<br>Jenkins Robot", 
                charset: 'UTF-8', mimeType: 'text/html', from: "${params.email_from}", to: "${params.email_to}", bcc: "${params.email_bcc}", cc: "${params.email_cc}", replyTo: "${params.email_to}";  
            }
        }  
    }
}