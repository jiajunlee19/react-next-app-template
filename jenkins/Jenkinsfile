pipeline {
    // agent any
    agent {
        node {
            label 'agent-win-jiajunlee'
        }
    }

    parameters {
        string(name: 'email_to', defaultValue: 'email@email.com', description: 'Jenkins Notifications E-mail To')
        string(name: 'email_bcc', defaultValue: '', description: 'Jenkins Notifications E-mail Bcc')
        string(name: 'email_cc', defaultValue: 'email@email.com', description: 'Jenkins Notifications E-mail Cc')
    }

    stages {
        stage('Init') {
            steps {
                withCredentials([file(credentialsId: 'pipeline-test1-envFile', variable: 'envFile')]) {
                    sh 'cp "$envFile" "$WORKSPACE"'
                    echo "Copied envFile into $WORKSPACE !"
                }
            }
        }

        stage('Dockerize') {
            steps {
                sh 'chmod +x ./jenkins/scripts/dockerize.sh'
                sh './jenkins/scripts/dockerize.sh'
            }
        }

        // stage('Install') {
        //     steps {
        //         sh 'chmod +x ./jenkins/scripts/install.sh'
        //         sh './jenkins/scripts/install.sh'
        //     }
        // }

        // stage('Kill') {
        //     when {
        //         branch 'master'
        //     }
        //     steps {
        //         sh 'chmod +x ./jenkins/scripts/kill.sh'
        //         sh './jenkins/scripts/kill.sh'
        //     }
        // }

        // stage('Build') {
        //     steps {
        //         sh 'chmod +x ./jenkins/scripts/build.sh'
        //         sh './jenkins/scripts/build.sh'
        //     }
        // }

        // stage('Deploy') {
        //     when {
        //         branch 'master'
        //     }
        //     steps {
        //         sh 'chmod +x ./jenkins/scripts/deploy.sh'
        //         sh 'JENKINS_NODE_COOKIE=dontKillMe ./jenkins/scripts/deploy.sh'
        //     }
        // }
    }

    post {
        success {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                echo "[Success]: ${env.JOB_NAME}"
                mail subject: "[Success]: ${env.JOB_NAME}", body: "Hi,<br><br>${env.JOB_NAME} has succeeded! Refer to below details: <br><br> \
                    <ul> \
                        <li>Change URL: ${env.CHANGE_URL}</li> \
                        <li>Change Branch: ${env.CHANGE_BRANCH}</li> \
                        <li>Change Target: ${env.CHANGE_TARGET}</li> \
                        <li>Build Number: ${env.BUILD_NUMBER}</li> \
                        <li>Build URL: ${env.BUILD_URL}</li> \
                        <li>Node Name: ${env.NODE_NAME}</li> \
                    </ul> \
                    <br><br><br>Best Regards,<br>Jenkins Robot", 
                charset: 'UTF-8', mimeType: 'text/html', from: 'no-reply@jenkins.com', to: "${params.email_to}", bcc: "${params.email_bcc}", cc: "${params.email_cc}", replyTo: "${params.email_to}";  
            }
        }  

        failure {  
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                echo "[Failure]: ${env.JOB_NAME}"
                mail subject: "[Failure]: ${env.JOB_NAME}", body: "Hi,<br><br>${env.JOB_NAME} has failed! Refer to below details: <br><br> \
                    <ul> \
                        <li>Change URL: ${env.CHANGE_URL}</li> \
                        <li>Change Branch: ${env.CHANGE_BRANCH}</li> \
                        <li>Change Target: ${env.CHANGE_TARGET}</li> \
                        <li>Build Number: ${env.BUILD_NUMBER}</li> \
                        <li>Build URL: ${env.BUILD_URL}</li> \
                        <li>Node Name: ${env.NODE_NAME}</li> \
                    </ul> \
                    <br><br><br>Best Regards,<br>Jenkins Robot", 
                charset: 'UTF-8', mimeType: 'text/html', from: 'no-reply@jenkins.com', to: "${params.email_to}", bcc: "${params.email_bcc}", cc: "${params.email_cc}", replyTo: "${params.email_to}";  
            }
        }  
    }
}